import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Load your dataset
main_df = pd.read_csv('/content/data.csv')
main_df = main_df.drop(['day', 'hour', 'sample_Number', 'month', 'timestamp'], axis=1)

# Assuming handle_non_numeric is meant for handling non-numeric data
# Replace it with a suitable method, for example, one-hot encoding
main_df = pd.get_dummies(main_df)

X = main_df

scaler = MinMaxScaler()

X = pd.DataFrame(scaler.fit_transform(X),
                 columns=X.columns,
                 index=X.index)

X = np.array(X)

# Define the sequence length (number of time steps for each input sample)
sequence_length = 9

# Create sequences of data
sequences = []
target = []
for i in range(len(X) - sequence_length):
    seq = X[i:i+sequence_length]
    label = X[i+sequence_length]
    sequences.append(seq)
    target.append(label)

X_data = np.array(sequences)
y_data = np.array(target)

# Split the data into training and testing sets
train_size = int(len(X_data) * 0.8)
X_train, X_test = X_data[:train_size], X_data[train_size:]
y_train, y_test = y_data[:train_size], y_data[train_size:]

# Reshape the data for LSTM input
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], X_train.shape[2]))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], X_test.shape[2]))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(units=X_train.shape[2]))

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])

# Train the LSTM model
NUM_EPOCHS = 20
for epoch in range(NUM_EPOCHS):
    model.fit(X_train, y_train, epochs=1, batch_size=32, validation_split=0.1, verbose=1)
    y_pred = model.predict(X_test)

    # Convert predictions to binary classes based on a threshold (you can adjust this threshold)
    threshold = 0.5
    y_pred_binary = np.where(y_pred >= threshold, 1, 0)
    y_test_binary = np.where(y_test >= threshold, 1, 0)

    # Calculate accuracy for the current iteration
    accuracy = accuracy_score(y_test_binary, y_pred_binary)
    print(f'Accuracy on Test Data (Iteration {epoch + 1}): {accuracy*100}')
